// The build script settings to fetch plugins and put them on classpath
buildscript {
    repositories {
        maven {
            url "http://repo1.maven.org/maven2/"
        }
        jcenter {
            url "http://jcenter.bintray.com/"
        }
        maven {
            url "http://plugins.gradle.org/m2/"
        }
        maven {
            name "lightbend-maven-releases"
            url "https://repo.lightbend.com/lightbend/maven-release"
        }
        ivy {
            name "lightbend-ivy-release"
            url "https://repo.lightbend.com/lightbend/ivy-releases"
            layout "ivy"
        }
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath "org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:1.0.1"
        classpath "gradle.plugin.org.scoverage:gradle-scoverage:2.3.0"
    }
}


// plugins to be resolved on top level but use on specific only
plugins {
    id 'org.asciidoctor.convert' version '1.5.6' apply false
//    id "org.scoverage" version "2.3.0" apply false
}

//local definitions
ext {
    scalaBinaryVersion = '2.11'
    scalaVersion = '2.11.8'
    junitVersion = '4.12'    
    
    sparkVersion = "2.2.1"
    
    spWaterVersion = "2.2.6" //2.2.10 doesnt work!!
    h2oVersion = '3.14.0.7'
    
    tfVersion = "1.6.0"
    
    playVersion = '2.6.13'
    
    
    scalaProjects = [
            project(':shared'),
            project(':api'),
            project(':ml_yarenty'),
            project(':ml_h2o'),
            project(':ml_tensorflow'),
            project(':web')
    ]
}

// applly for all projects
allprojects {
    apply plugin: 'idea'
    
    group = "com.yarenty.ml"

}


subprojects {
    version = rootProject.version
    repositories {
        maven {
            url "http://repo1.maven.org/maven2/"
        }
        maven {
            url "http://repository.cloudera.com/artifactory/cloudera-repos/"
        }
        maven {
            url "http://repo.hortonworks.com/content/repositories/releases/"
        }
        maven {
            url "http://oss.sonatype.org/content/repositories/releases/"
        }
        maven {
            url "http://repository.apache.org/content/groups/snapshots"
        }
        maven {
            name "lightbend-maven-releases"
            url "https://repo.lightbend.com/lightbend/maven-release"
        }
        ivy {
            name "lightbend-ivy-release"
            url "https://repo.lightbend.com/lightbend/ivy-releases"
            layout "ivy"
        }
    }

    // default settings for all scala subprojects
    if (project in scalaProjects) {
        apply plugin: 'scala'
        apply plugin: 'scalaStyle'
//        apply plugin: "org.scoverage"


        dependencies {
            compile "org.scala-lang:scala-library:$scalaVersion"
            testCompile "junit:junit:${junitVersion}"
            testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:2.2.1"
        }
        
        
        scalaStyle {
            configLocation = "$rootDir/scalastyle-config.xml"
            includeTestSourceDirectory = true
            source = "src/main/scala"
            testSource = "src/test/scala"
            outputFile = "$buildDir/checkstyle-result.xml"
        }
        
    }

}


project(':api') {
    dependencies {
        compile project(':shared')
        testCompile project(':shared')
    }
}

project(':ml_yarenty') {
    dependencies {
        compile project(':shared'), project(':api')
        testCompile project(':shared'), project(':api')
    }
}



project(':ml_h2o') {
    dependencies {
        compile project(':ml_yarenty'), project(':shared'), project(':api')
        testCompile project(':shared'), project(':api')
    }
}


project(':ml_tensorflow') {
    dependencies {
        compile project(':ml_yarenty'), project(':shared'), project(':api')
        testCompile project(':shared'), project(':api')
    }
}


project(':web') {
    dependencies {
        compile project(':ml_h2o'), project(':ml_yarenty'), project(':shared'), project(':api')
        testCompile project(':shared'), project(':api')
    }
}

tasks.withType(ScalaCompile) {
    ScalaCompileOptions.metaClass.daemonServer = true
    ScalaCompileOptions.metaClass.fork = true
    ScalaCompileOptions.metaClass.useAnt = false
    ScalaCompileOptions.metaClass.useCompileDaemon = false
}

